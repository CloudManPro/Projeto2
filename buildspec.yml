version: 0.2

phases:
  pre_build:
    commands:
      #Faz autenticação no ECR
      - echo "Logging in to Amazon ECR in region ${REGION}..."
      - REPO_URI="${ACCOUNT}.dkr.ecr.${REGION}.amazonaws.com/${AWS_ECR_REPOSITORY_TARGET_NAME_0}"
      - aws ecr get-login-password --region ${REGION} | docker login --username AWS --password-stdin ${ACCOUNT}.dkr.ecr.${REGION}.amazonaws.com
      - IMAGE_TAG=$(echo $CODEBUILD_RESOLVED_SOURCE_VERSION | cut -c 1-7)

  build:
    commands:
      - echo "Build started on $(date)"
      # 1. Compila a aplicação .NET e coloca os artefatos na pasta 'publish_output'
      - echo "Compiling .NET application..."
      - dotnet publish -c Release -o ./publish_output MeuSite.csproj
      
      # 2. Constrói a imagem Docker usando o Dockerfile simplificado
      #    O Dockerfile vai copiar o conteúdo da pasta 'publish_output'
      # 
      - echo "Building the Docker image..."
      - docker build -t $REPO_URI:latest .  
      - docker tag $REPO_URI:latest $REPO_URI:$IMAGE_TAG

  post_build:
    commands:
      - echo "Build completed on $(date)"
      # 3. Envia a imagem Docker para o Amazon ECR
      - echo "Pushing the Docker image to $REPO_URI..."
      - docker push $REPO_URI:latest
      - docker push $REPO_URI:$IMAGE_TAG

      # 4. Cria os artefatos de deploy para o AWS CodeDeploy
      - echo "Creating imagedefinitions.json for CodeDeploy..."
      - printf '[{"name":"%s","imageUri":"%s"}]' "${CONTAINER_NAME_0}" "${REPO_URI}:${IMAGE_TAG}" > imagedefinitions.json
      - echo "Content of imagedefinitions.json:"
      - cat imagedefinitions.json

      - echo "Creating dynamic appspec.yml for CodeDeploy..."
      - EXTRACTED_PORT=$(echo "${Port_Mappings_0}" | sed -n 's/.*containerPort=\([0-9]*\).*/\1/p')
      - |
        printf 'version: 0.0\nResources:\n  - TargetService:\n      Type: AWS::ECS::Service\n      Properties:\n        TaskDefinition: "%s"\n        LoadBalancerInfo:\n          ContainerName: "%s"\n          ContainerPort: %s\n' "${TASK_DEFINITION_ARN_0}" "${CONTAINER_NAME_0}" "${EXTRACTED_PORT}" > appspec.yml
      - echo "Content of appspec.yml:"
      - cat appspec.yml

artifacts:
  files:
    - imagedefinitions.json
    - appspec.yml
  discard-paths: yes

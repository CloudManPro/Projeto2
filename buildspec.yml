version: 0.2

phases:
  pre_build:
    commands:
      - echo "Logging in to Amazon ECR in region ${REGION}..."
      - REPO_URI="${ACCOUNT}.dkr.ecr.${REGION}.amazonaws.com/${AWS_ECR_REPOSITORY_TARGET_NAME_0}"
      - aws ecr get-login-password --region ${REGION} | docker login --username AWS --password-stdin ${ACCOUNT}.dkr.ecr.${REGION}.amazonaws.com
      - IMAGE_TAG=$(echo $CODEBUILD_RESOLVED_SOURCE_VERSION | cut -c 1-7)

  build:
    commands:
      - echo "Build started on $(date)"
      - echo "Running dotnet publish..."
      - dotnet publish -c Release -o ./build_output MeuSite.csproj
      - echo "Building the Docker image..."
      - docker build -t $REPO_URI:latest .
      - docker tag $REPO_URI:latest $REPO_URI:$IMAGE_TAG

  post_build:
    commands:
      - echo "Build completed on $(date)"
      - echo "Pushing the Docker image to $REPO_URI..."
      - docker push $REPO_URI:latest
      - docker push $REPO_URI:$IMAGE_TAG

      # --- INÍCIO DA MODIFICAÇÃO PARA TESTE ---

      # 1. Cria o imagedefinitions.json (como antes)
      - echo "Creating imagedefinitions.json..."
      - printf '[{"name":"Projeto2","imageUri":"%s"}]' "${REPO_URI}:${IMAGE_TAG}" > imagedefinitions.json
      - echo "Content of imagedefinitions.json:"
      - cat imagedefinitions.json

      # 2. Cria o appspec.yml HARDCODED para o teste
      - echo "Creating HARDCODED appspec.yml for testing..."
      - >
        printf 'version: 0.0\nResources:\n  - TargetService:\n      Type: AWS::ECS::Service\n      Properties:\n        TaskDefinition: "%s"\n        LoadBalancerInfo:\n          ContainerName: "Projeto2"\n          ContainerPort: 80\n' \
        "COLE_O_ARN_COMPLETO_DA_SUA_TASK_DEFINITION_AQUI" > appspec.yml
      - echo "Content of appspec.yml:"
      - cat appspec.yml
      
      # --- FIM DA MODIFICAÇÃO PARA TESTE ---

artifacts:
  files:
    # 3. Inclui AMBOS os arquivos no artefato de saída
    - imagedefinitions.json
    - appspec.yml
  discard-paths: yes
